version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15-alpine
    container_name: audit-trail-postgres
    environment:
      POSTGRES_DB: audit_trail
      POSTGRES_USER: audit_user
      POSTGRES_PASSWORD: your_secure_password
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - audit-trail-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U audit_user -d audit_trail"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Zookeeper (required for Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: audit-trail-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - audit-trail-network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: audit-trail-kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_RETENTION_BYTES: 1073741824
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_NUM_PARTITIONS: 10
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - audit-trail-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kafka UI (for development)
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: audit-trail-kafka-ui
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - audit-trail-network
    profiles:
      - dev

  # Redis (for caching)
  redis:
    image: redis:7-alpine
    container_name: audit-trail-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - audit-trail-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: redis-server --appendonly yes

  # Kafka topic initialization
  kafka-init:
    image: confluentinc/cp-kafka:7.4.0
    container_name: audit-trail-kafka-init
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - audit-trail-network
    command: |
      bash -c "
        # Wait for Kafka to be ready
        sleep 10
        
        # Create topics
        kafka-topics --create --if-not-exists --topic orders.order.created --partitions 10 --replication-factor 1 --bootstrap-server kafka:9092
        kafka-topics --create --if-not-exists --topic orders.order.updated --partitions 10 --replication-factor 1 --bootstrap-server kafka:9092
        kafka-topics --create --if-not-exists --topic orders.order.cancelled --partitions 10 --replication-factor 1 --bootstrap-server kafka:9092
        kafka-topics --create --if-not-exists --topic orders.order.completed --partitions 10 --replication-factor 1 --bootstrap-server kafka:9092
        kafka-topics --create --if-not-exists --topic payments.payment.processed --partitions 10 --replication-factor 1 --bootstrap-server kafka:9092
        kafka-topics --create --if-not-exists --topic payments.payment.failed --partitions 5 --replication-factor 1 --bootstrap-server kafka:9092
        kafka-topics --create --if-not-exists --topic inventory.item.updated --partitions 5 --replication-factor 1 --bootstrap-server kafka:9092
        kafka-topics --create --if-not-exists --topic shipping.shipment.created --partitions 5 --replication-factor 1 --bootstrap-server kafka:9092
        kafka-topics --create --if-not-exists --topic shipping.shipment.delivered --partitions 5 --replication-factor 1 --bootstrap-server kafka:9092
        
        # Create dead letter queue topics
        kafka-topics --create --if-not-exists --topic orders.order.created.dlq --partitions 1 --replication-factor 1 --bootstrap-server kafka:9092
        kafka-topics --create --if-not-exists --topic orders.order.updated.dlq --partitions 1 --replication-factor 1 --bootstrap-server kafka:9092
        kafka-topics --create --if-not-exists --topic payments.payment.processed.dlq --partitions 1 --replication-factor 1 --bootstrap-server kafka:9092
        kafka-topics --create --if-not-exists --topic inventory.item.updated.dlq --partitions 1 --replication-factor 1 --bootstrap-server kafka:9092
        
        echo 'Topics created successfully'
      "
    profiles:
      - init

  # Prometheus (for metrics)
  prometheus:
    image: prom/prometheus:latest
    container_name: audit-trail-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infra/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - audit-trail-network
    profiles:
      - monitoring

  # Grafana (for dashboards)
  grafana:
    image: grafana/grafana:latest
    container_name: audit-trail-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infra/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./infra/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - audit-trail-network
    profiles:
      - monitoring

  # EventIngestor Service
  event-ingestor:
    build:
      context: .
      dockerfile: src/EventIngestor/Dockerfile
    container_name: audit-trail-event-ingestor
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=audit_trail
      - DB_USER=audit_user
      - DB_PASSWORD=your_secure_password
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - LOG_LEVEL=Information
    networks:
      - audit-trail-network
    profiles:
      - services

  # AuditApi Service
  audit-api:
    build:
      context: .
      dockerfile: src/AuditApi/Dockerfile
    container_name: audit-trail-audit-api
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "5000:5000"
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=audit_trail
      - DB_USER=audit_user
      - DB_PASSWORD=your_secure_password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - API_PORT=5000
      - LOG_LEVEL=Information
    networks:
      - audit-trail-network
    profiles:
      - services

volumes:
  postgres_data:
    driver: local
  kafka_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  audit-trail-network:
    driver: bridge
    name: audit-trail-network
